---
import MainHeader from "./main-header.astro";
import Navbar from "../navbar.astro";
import "@fontsource-variable/inter";
import "../../global.css";
import Footer from "../footer.astro";
import NewPostHeader from "../blog/new-post-header.astro";
import PageSchema from "../seo/page-schema.astro";
import PostSchema from "../seo/post-schema.astro";
import Feedback from "../blog/feedback";

interface Props {
  title: string;
  description: string;
  publishedDate: Date;
  updatedDate: Date;
  ogImage: string | undefined;
  featuredImage: string;
  category: string[];
}

const {
  title,
  description,
  publishedDate,
  updatedDate,
  ogImage,
  featuredImage,
  category,
} = Astro.props;

// formatting the dates and adding random time
const formattedPublishedDate = `${
  new Date(publishedDate).toISOString().split("T")[0]
}:T13:50:13+00:00`;
const formattedUpdatedDate = `${
  new Date(updatedDate).toISOString().split("T")[0]
}:T16:52:29+00:00`;
---

<!doctype html>
<html class="dark" lang="en">
  <MainHeader {title} {description} {ogImage}>
    <meta property="article:published_time" content={formattedPublishedDate} />
    <meta property="article:modified_time" content={formattedUpdatedDate} />
    <link rel="stylesheet" href="/prism-dracula.css" />
    <!-- <PostSchema
      {title}
      {description}
      publishedAt={formattedPublishedDate}
      updatedAt={formattedUpdatedDate}
      featuredImage={featuredImage}
      {category}
    /> -->

    {
      Boolean(Number(import.meta.env.CAPTURE_ANALYTICS)) && (
      <script is:inline>
    !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.async=!0,p.src=s.api_host+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys onSessionId".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
    posthog.init('phc_v2ScNgmrvSyQW0ClZ5Ozl4YMaYACaggPJy2pPEUs0Mh',{api_host:'https://eu.posthog.com'})
    </script>
      )
    }
  </MainHeader>

  <body>
    <Navbar />

    {
      Boolean(Number(import.meta.env.SHOW_HEADER_ADS)) && (
      <ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-4587134058392926"
     data-ad-slot="7175656160"
     data-ad-format="auto"
     data-full-width-responsive="true"></ins>
<script is:inline>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
      )
    }
    <main class="md:mx-auto md:px-7 px-4 pb-2 w-full">
      <section
        class="max-w-7xl md:w-[85%] lg:w-full mx-auto post-content text-[19px]"
      >
        <NewPostHeader {title} {publishedDate} {updatedDate} />
        <slot />
      </section>
      <Feedback client:visible />
    </main>

    {
      Boolean(Number(import.meta.env.SHOW_FOOTER_ADS)) && (
      <ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-4587134058392926"
     data-ad-slot="2972116450"
     data-ad-format="auto"
     data-full-width-responsive="true"></ins>

<script is:inline>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
      )
    }

    <Footer />

    <script>
      const pageReferrer = document.referrer;

      setTimeout(() => {
        eventDispatcher("pageLoad");
      }, 5000);
      setTimeout(() => {
        eventDispatcher("after30s");
      }, 30000);

      let hasScrolled = false;
      let isAtBottom = false;

      window.addEventListener("scroll", function () {
        let distanceToBottom =
          document.body.offsetHeight - (window.innerHeight + window.scrollY);

        if (distanceToBottom < 50) {
          if (isAtBottom) return;

          isAtBottom = true;
          eventDispatcher("bottom");
        }
        if (hasScrolled) return;
        hasScrolled = true;
        eventDispatcher("scroll");
      });

      async function eventDispatcher(type: string) {
        if (window.location.host !== "everythingcs.dev") return;
        const slug = window.location.pathname.split("/")[2];
        const device = window.navigator.userAgent;

        await fetch("https://apis.everythingcs.dev/v1/events", {
          method: "POST",
          body: JSON.stringify({ type, slug, device, referrer: pageReferrer }),
        });
      }
    </script>

    {
      Boolean(Number(import.meta.env.SHOW_ADS)) && (
        <script
          async
          src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4587134058392926"
          crossorigin="anonymous"
        />
      )
    }
  </body>
</html>
