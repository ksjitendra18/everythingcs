---
import MainHeader from "./main-header.astro";
import Navbar from "../navbar.astro";
import "@fontsource-variable/inter";
import "../../global.css";
import Footer from "../footer.astro";
import NewPostHeader from "../blog/new-post-header.astro";
import PageSchema from "../seo/page-schema.astro";
import PostSchema from "../seo/post-schema.astro";
import Feedback from "../blog/feedback";

interface Props {
  title: string;
  description: string;
  publishedDate: Date;
  updatedDate: Date;
  ogImage: string | undefined;
  featuredImage: string;
  category: string[];
}

const {
  title,
  description,
  publishedDate,
  updatedDate,
  ogImage,
  featuredImage,
  category,
} = Astro.props;

// formatting the dates and adding random time
const formattedPublishedDate = `${
  new Date(publishedDate).toISOString().split("T")[0]
}:T13:50:13+00:00`;
const formattedUpdatedDate = `${
  new Date(updatedDate).toISOString().split("T")[0]
}:T16:52:29+00:00`;
---

<!doctype html>
<html class="dark" lang="en">
  <MainHeader {title} {description} {ogImage}>
    <meta property="article:published_time" content={formattedPublishedDate} />
    <meta property="article:modified_time" content={formattedUpdatedDate} />
    <link rel="stylesheet" href="/prism-dracula.css" />
    <!-- <PostSchema
      {title}
      {description}
      publishedAt={formattedPublishedDate}
      updatedAt={formattedUpdatedDate}
      featuredImage={featuredImage}
      {category}
    /> -->
  </MainHeader>

  <body>
    <Navbar />

    <main class="md:mx-auto md:px-7 px-4 pb-2 w-full">
      <section
        class="max-w-7xl md:w-[85%] lg:w-full mx-auto post-content text-[19px]"
      >
        <NewPostHeader {title} {publishedDate} {updatedDate} />
        <slot />
      </section>
      <Feedback client:visible />
    </main>

    <Footer />

    <script src="https://challenges.cloudflare.com/turnstile/v0/api.js" defer
    ></script>

    <script>
      const pageReferrer = document.referrer;

      setTimeout(() => {
        eventDispatcher("pageLoad");
      }, 5000);
      setTimeout(() => {
        eventDispatcher("after30s");
      }, 30000);

      let hasScrolled = false;
      let isAtBottom = false;

      window.addEventListener("scroll", function () {
        let distanceToBottom =
          document.body.offsetHeight - (window.innerHeight + window.scrollY);

        if (distanceToBottom < 50) {
          if (isAtBottom) return;

          isAtBottom = true;
          eventDispatcher("bottom");
        }
        if (hasScrolled) return;
        hasScrolled = true;
        eventDispatcher("scroll");
      });

      async function eventDispatcher(type: string) {
        if (window.location.host !== "everythingcs.dev") return;
        const slug = window.location.pathname.split("/")[2];
        const device = window.navigator.userAgent;

        await fetch("https://apis.everythingcs.dev/v1/events", {
          method: "POST",
          body: JSON.stringify({ type, slug, device, referrer: pageReferrer }),
        });
      }
    </script>
  </body>
</html>
